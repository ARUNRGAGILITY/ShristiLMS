 <div class="exercise">
            <h4>üéØ Exercise 4: Student Grade Manager</h4>
            <div class="exercise-step">
                <strong>Step 1:</strong> Create a dictionary to store student names and their grades (list of scores)
            </div>
            <div class="exercise-step">
                <strong>Step 2:</strong> Add functions to add new students, add grades, and calculate averages
            </div>
            <div class="exercise-step">
                <strong>Step 3:</strong> Use list comprehensions to find students with averages above 85
            </div>
            <div class="exercise-step">
                <strong>Step 4:</strong> Create a set of all unique grades across all students
            </div>
            <div class="exercise-step">
                <strong>Step 5:</strong> Use dictionary comprehension to create a grade distribution counter
            </div>
            <div class="exercise-step">
                <strong>Step 6:</strong> Display the results in a formatted table
            </div>
        </div>

        <div class="exercise">
            <h4>üéØ Exercise 5: Data Analysis with Comprehensions</h4>
            <div class="exercise-step">
                <strong>Step 1:</strong> Create a list of sales data (dictionaries with date, product, amount)
            </div>
            <div class="exercise-step">
                <strong>Step 2:</strong> Use list comprehension to filter sales above 1000
            </div>
            <div class="exercise-step">
                <strong>Step 3:</strong> Use dictionary comprehension to group sales by product
            </div>
            <div class="exercise-step">
                <strong>Step 4:</strong> Use set comprehension to find unique products sold
            </div>
            <div class="exercise-step">
                <strong>Step 5:</strong> Create a nested comprehension to calculate monthly totals
            </div>
        </div>

        <div class="scenario-box">
            <h4>Choosing the Right Data Structure</h4>
            <p><strong>List:</strong> When you need ordered, changeable data with possible duplicates</p>
            <p><strong>Tuple:</strong> When you need ordered, unchangeable data (coordinates, database records)</p>
            <p><strong>Dictionary:</strong> When you need key-value pairs for fast lookups</p>
            <p><strong>Set:</strong> When you need unique elements or mathematical set operations</p>
            <p><strong>Counter:</strong> When you need to count occurrences of elements</p>
            <p><strong>defaultdict:</strong> When you need dictionaries with default values</p>
            <p><strong>deque:</strong> When you need efficient operations at both ends</p>
        </div>

        <div class="scenario-box">
            <h4>When to Use Comprehensions</h4>
            <p><strong>List Comprehension:</strong> Creating new lists from existing iterables</p>
            <p><strong>Dict Comprehension:</strong> Creating dictionaries with transformed keys/values</p>
            <p><strong>Set Comprehension:</strong> Creating sets with unique elements</p>
            <p><strong>Generator Expression:</strong> Memory-efficient iteration over large datasets</p>
            <p><strong>Nested Comprehensions:</strong> Working with nested data structures</p>
        </div>

        <div class="tip">
            <strong>üí° Performance Tips:</strong>
            <p>‚Ä¢ Use sets for membership testing - O(1) vs O(n) for lists</p>
            <p>‚Ä¢ Use dictionaries for key-based lookups - O(1) average case</p>
            <p>‚Ä¢ List comprehensions are faster than equivalent for loops</p>
            <p>‚Ä¢ Generator expressions save memory for large datasets</p>
            <p>‚Ä¢ Use appropriate data structure: Counter for counting, defaultdict for default values</p>
            <p>‚Ä¢ deque is faster than list for operations at both ends</p>
        </div>

        <div class="warning">
            <strong>‚ö†Ô∏è Common Mistakes:</strong>
            <p>‚Ä¢ <strong>Modifying lists while iterating:</strong> Use list comprehension or iterate over a copy</p>
            <p>‚Ä¢ <strong>Using mutable objects as dictionary keys:</strong> Only use immutable types (strings, numbers, tuples)</p>
            <p>‚Ä¢ <strong>Confusing '{}' with 'set()':</strong> '{}' creates an empty dict, not a set</p>
            <p>‚Ä¢ <strong>Overcomplicating comprehensions:</strong> If it's hard to read, use a regular loop</p>
            <p>‚Ä¢ <strong>Using list when set is appropriate:</strong> Sets are much faster for membership testing</p>
            <p>‚Ä¢ <strong>Not using get() for dictionaries:</strong> Prevents KeyError for missing keys</p>
        </div>

        <div class="theory-box">
            <h4>Time Complexity Comparison</h4>
            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin-top: 10px;">
                <p><strong>Access by index/key:</strong> List O(1), Tuple O(1), Dict O(1), Set N/A</p>
                <p><strong>Search (membership):</strong> List O(n), Tuple O(n), Dict O(1), Set O(1)</p>
                <p><strong>Insert/Add:</strong> List O(1) append/O(n) insert, Tuple Immutable, Dict O(1), Set O(1)</p>
                <p><strong>Delete:</strong> List O(n), Tuple Immutable, Dict O(1), Set O(1)</p>
            </div>
        </div>